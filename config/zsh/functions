function o() {
    open ${1:-.};
}

function brew_clean() {
    brew update-reset;
    brew doctor;
    brew cleanup;
    rm -rf "$(brew --cache)/*";
    rm -rf ~/Library/Caches/Homebrew;
}

function mcdir() {
    mkdir -p "$1";
    cd "$1";
}

# Caches the output of a binary initialization command, to avoid the time to
# execute it in the future.
#
# Usage: _evalcache <command> <generation args...>
# Source: https://github.com/mroth/evalcache
# Placed here since I don't have a plugin system in use
function _evalcache () {
    local cacheFile="$ZSH_EVALCACHE_DIR/init-${1##*/}.sh"

    if [ "$ZSH_EVALCACHE_DISABLE" = "true" ]; then
        eval "$("$@")"
    elif [ -s "$cacheFile" ]; then
        source "$cacheFile"
    else
        if type "$1" > /dev/null; then
            (>&2 echo "$1 initialization not cached, caching output of: $*")
            mkdir -p "$ZSH_EVALCACHE_DIR"
            "$@" > "$cacheFile"
            source "$cacheFile"
        else
            echo "evalcache ERROR: $1 is not installed or in PATH"
        fi
    fi
}

# Benchmarks the current shell
function bench_shell() {
    for i in $(seq 1 10); do /usr/bin/time $SHELL -i -c exit; done
}

# ex - archive extractor
# usage: ex <file>
# Source: https://github.com/akshansh2000/dotFiles/blob/master/.zshrc
ex () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
